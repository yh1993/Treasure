package com.dell.treasure.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK".
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LastId = new Property(1, String.class, "lastId", false, "LAST_ID");
        public final static Property TaskId = new Property(2, String.class, "taskId", false, "TASK_ID");
        public final static Property TargetBle = new Property(3, String.class, "targetBle", false, "TARGET_BLE");
        public final static Property BeginTime = new Property(4, String.class, "beginTime", false, "BEGIN_TIME");
        public final static Property EndTime = new Property(5, String.class, "endTime", false, "END_TIME");
        public final static Property Flag = new Property(6, int.class, "flag", false, "FLAG");
    }


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LAST_ID\" TEXT," + // 1: lastId
                "\"TASK_ID\" TEXT UNIQUE ," + // 2: taskId
                "\"TARGET_BLE\" TEXT," + // 3: targetBle
                "\"BEGIN_TIME\" TEXT," + // 4: beginTime
                "\"END_TIME\" TEXT," + // 5: endTime
                "\"FLAG\" INTEGER NOT NULL );"); // 6: flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lastId = entity.getLastId();
        if (lastId != null) {
            stmt.bindString(2, lastId);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(3, taskId);
        }
 
        String targetBle = entity.getTargetBle();
        if (targetBle != null) {
            stmt.bindString(4, targetBle);
        }
 
        String beginTime = entity.getBeginTime();
        if (beginTime != null) {
            stmt.bindString(5, beginTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(6, endTime);
        }
        stmt.bindLong(7, entity.getFlag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lastId = entity.getLastId();
        if (lastId != null) {
            stmt.bindString(2, lastId);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(3, taskId);
        }
 
        String targetBle = entity.getTargetBle();
        if (targetBle != null) {
            stmt.bindString(4, targetBle);
        }
 
        String beginTime = entity.getBeginTime();
        if (beginTime != null) {
            stmt.bindString(5, beginTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(6, endTime);
        }
        stmt.bindLong(7, entity.getFlag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lastId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // taskId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // targetBle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // beginTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // endTime
            cursor.getInt(offset + 6) // flag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLastId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTaskId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTargetBle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBeginTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEndTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFlag(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
